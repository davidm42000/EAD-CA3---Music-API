@page "/search_artist"
@inject HttpClient Http
@inject NavigationManager UriHelper
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Threading.Tasks;
@using Newtonsoft.Json;




<h3>Search Artist</h3>

<div class="input-group rounded">
    <input id="artist_search" type="search" class="form-control rounded" placeholder="Search" aria-label="Search"
           aria-describedby="search-addon" @bind="@ArtistValue" @oninput="@((e) => { ArtistValue=(string)e.Value;})" />
    <button id="search-button" type="button" class="btn btn-primary" @onclick="SearchArtists">
        <i class="oi oi-magnifying-glass"></i>
    </button>
</div>

@if (allArtists2 == null)
{
}
else
{

    @try
    {
        @for (int i = 0; i < allArtists2.Artists.Count(); i++)
        {
            <div>
                <h3>@allArtists2.Artists[i].strArtist</h3>
                <img style="height: 15em; width: 30em;" src="@allArtists2.Artists[i].strArtistWideThumb">
                <br />
                <br />
                <h5>Year Formed - @allArtists2.Artists[i].intFormedYear</h5>
                <h5>Genre - @allArtists2.Artists[i].strGenre</h5>
                <h5>Label - @allArtists2.Artists[i].strLabel</h5>
                <br />
                <br />
                <h5>About Them: </h5>
                <h5>@allArtists2.Artists[i].strBiographyEN</h5>
            </div>

            <br />
            <br />

            <h4>Search Song Lyrics For This Artist</h4>

            <div class="input-group rounded" style="width: 30em">
                <input id="lyrics_search" type="search" class="form-control rounded" placeholder="Search" aria-label="Search"
                       aria-describedby="search-addon" @bind="@SongValue" @oninput="@((e) => { SongValue = (string)e.Value; })" />
                <button id="search-button" type="button" class="btn btn-primary" @onclick="SearchLyrics">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
            <br />
            <br />

            @if (lyrics == null)
            {
            }
            else
            {
                try
                {
                    <p>@lyrics</p>
                    <br />
                    <br />

                }
                catch (Exception e)
                {
                    developerErrorMessage = e.Message;
                    Console.WriteLine(developerErrorMessage);
                    ErrorMessage = "Lyrics Not Found";
                }
            }
        }

    }
    catch (Exception e)
    {
        developerErrorMessage = e.Message;
        Console.WriteLine(developerErrorMessage);
        ErrorMessage = "There is no Artist in our Database with that name, Please spell the artist correctly";

    }
}

<h5 style="color: red">@ErrorMessage</h5>




@code {

    private string developerErrorMessage = "Nothing";
    private string ErrorMessage { get; set; }
    private string ArtistValue { get; set; } = "blazor";
    private string SongValue { get; set; }


    public string? lyrics { get; set; }
    public string? artistName2 { get; set; } = "NO yo";


    public class Artist
    {
        public string idArtist { get; set; }
        public string strArtist { get; set; }
        public object strArtistStripped { get; set; }
        public string strArtistAlternate { get; set; }
        public string strLabel { get; set; }
        public string idLabel { get; set; }
        public string intFormedYear { get; set; }
        public string intBornYear { get; set; }
        public object intDiedYear { get; set; }
        public object strDisbanded { get; set; }
        public string strStyle { get; set; }
        public string strGenre { get; set; }
        public string strMood { get; set; }
        public string strWebsite { get; set; }
        public string strFacebook { get; set; }
        public string strTwitter { get; set; }
        public string strBiographyEN { get; set; }
        public string strBiographyDE { get; set; }
        public string strBiographyFR { get; set; }
        public string strBiographyCN { get; set; }
        public string strBiographyIT { get; set; }
        public string strBiographyJP { get; set; }
        public string strBiographyRU { get; set; }
        public string strBiographyES { get; set; }
        public string strBiographyPT { get; set; }
        public string strBiographySE { get; set; }
        public string strBiographyNL { get; set; }
        public string strBiographyHU { get; set; }
        public string strBiographyNO { get; set; }
        public string strBiographyIL { get; set; }
        public string strBiographyPL { get; set; }
        public string strGender { get; set; }
        public string intMembers { get; set; }
        public string strCountry { get; set; }
        public string strCountryCode { get; set; }
        public string strArtistThumb { get; set; }
        public string strArtistLogo { get; set; }
        public string strArtistClearart { get; set; }
        public string strArtistWideThumb { get; set; }
        public string strArtistFanart { get; set; }
        public string strArtistFanart2 { get; set; }
        public string strArtistFanart3 { get; set; }
        public string strArtistFanart4 { get; set; }
        public string strArtistBanner { get; set; }
        public string strMusicBrainzID { get; set; }
        public object strISNIcode { get; set; }
        public string strLastFMChart { get; set; }
        public string intCharted { get; set; }
        public string strLocked { get; set; }
    }

    public class AllArtists
    {
        public List<Artist> Artists { get; set; }
    }

    private AllArtists allArtists2;


    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class Lyrics
    {
        public string? lyrics { get; set; }
    }

    public Lyrics? l1;

    // lifecycle method
    protected async Task SearchLyrics()
    {

        try
        {
            using var httpResponse = await Http.GetAsync("https://api.lyrics.ovh/v1/" + ArtistValue + "/" + SongValue);
            l1 = await httpResponse.Content.ReadFromJsonAsync<Lyrics>();
            lyrics = l1.lyrics;

            if (l1 != null)
            {
                ErrorMessage = " ";
            }
        }
        catch (Exception e)
        {
            developerErrorMessage = e.Message;
            ErrorMessage = "Lyrics Not Found";
        }

    }

    protected async Task SearchArtists()
    {
        try
        {

            HttpResponseMessage response = await Http.GetAsync("https://theaudiodb.com/api/v1/json/2/search.php?s=" + ArtistValue);
            string dtls = await response.Content.ReadAsStringAsync();

            AllArtists allArtists = JsonConvert.DeserializeObject<AllArtists>(dtls);

            allArtists2 = allArtists;

            artistName2 = allArtists2.Artists[0].strArtist;


            if (allArtists != null)
            {
                ErrorMessage = " ";
            }


        }
        catch (Exception e)
        {
            developerErrorMessage = e.Message;
            Console.WriteLine(developerErrorMessage);
            ErrorMessage = "There is no Artist in our Database with that name, Please spell the artist correctly";

        }

    }
}